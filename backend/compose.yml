name: minizord-prod
services:
  db:
    image: surrealdb/surrealdb:v2.2
    restart: on-failure
    user: root
    volumes:
      - db:/var/lib/surrealdb
    command:
      - start
    environment:
      SURREAL_USER: ${DB_USER}
      SURREAL_PASS: ${DB_PASSWORD}
      SURREAL_PATH: rocksdb:/var/lib/surrealdb
  s3:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    volumes:
      - s3:/data
    command: server /data --console-address ":9001"
  init-buckets:
    image: minio/mc
    depends_on:
      - s3
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    entrypoint: >
      sh -c "until mc alias set myminio http://s3:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD; do sleep 1; done &&
             mc mb myminio/loki &&
             mc mb myminio/tempo &&
             mc mb myminio/mimir &&
             mc mb myminio/images &&
             mc policy set public myminio/loki"
  grafana:
    image: grafana/grafana:main
    ports:
      - "3001:3000"
    volumes:
      - grafana:/var/lib/grafana
  prometheus:
    image: prom/prometheus:main
    volumes:
      - prometheus:/prometheus
      - ../assets/telemetry-configs/prometheus-dev.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--enable-feature=native-histograms"
      - "--web.listen-address=:9091"
    network_mode: "host"
  loki:
    image: grafana/loki:3.4.1
    restart: always
    volumes:
      - ../assets/telemetry-configs/loki.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    depends_on:
      - s3
  tempo:
    image: grafana/tempo:latest
    restart: always
    volumes:
      - ../assets/telemetry-configs/tempo.yml:/etc/tempo/tempo-config.yaml
      - tempo:/var/tempo
    command: -config.file=/etc/tempo/tempo-config.yaml
    depends_on:
      - s3
      - prometheus
  mimir:
    image: grafana/mimir:latest
    restart: always
    volumes:
      - ../assets/telemetry-configs/mimir.yml:/etc/mimir/mimir.yaml
    command: --config.file=/etc/mimir/mimir.yaml
    depends_on:
      - s3
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ../assets/telemetry-configs/otel-collector.yml:/etc/otelcol-contrib/config.yaml
  api:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        CRATE: api
    restart: on-failure
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      RUST_LOG: ${LOG_LEVEL}
      SERVER_ADDRESS: 0.0.0.0:8080
      DB_ADDRESS: db:8000
      DB_NAMESPACE: minizord
      DB_NAME: api
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: P9mzO6aO64hgkVCBN96CfpUXB1x58XA3zmGuoT4HjSdhHgyRBnqv/EsPDCfs9CRT/oEJYSu6YDcvmdrf/utDNQ==
      OTEL_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: minizord_api
      S3_BASE_URL: http://s3:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_REGION: ${S3_REGION}
  tunnel:
    image: cloudflare/cloudflared:latest
    restart: always
    command: tunnel --no-autoupdate run
    environment:
      TUNNEL_TOKEN: ${CLOUDFLARED_TOKEN}
    depends_on:
      - api
volumes:
  db:
  s3:
  prometheus:
  tempo:
  grafana:
