name: minizord-prod
services:
  db:
    image: surrealdb/surrealdb:latest
    restart: on-failure
    user: root
    volumes:
      - db:/var/lib/surrealdb
    command:
      - start
    environment:
      SURREAL_USER: ${DB_USER}
      SURREAL_PASS: ${DB_PASSWORD}
      SURREAL_PATH: rocksdb:/var/lib/surrealdb
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  s3:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
      MINIO_PROMETHEUS_AUTH_TYPE: public
    volumes:
      - s3:/data
    command: server /data --console-address ":9001"
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  init-buckets:
    image: minio/mc:latest
    depends_on:
      - s3
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    entrypoint: >
      sh -c "until mc alias set myminio http://s3:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD; do sleep 1; done &&
             mc mb myminio/loki &&
             mc mb myminio/tempo &&
             mc mb myminio/mimir &&
             mc mb myminio/images &&
             mc policy set public myminio/loki"
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - prometheus:/prometheus
      - ./assets/configs/prod/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--enable-feature=native-histograms"
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  loki:
    image: grafana/loki:latest
    restart: always
    volumes:
      - ./assets/configs/prod/loki.yml:/etc/loki/local-config.yaml
    command: 
      - "--config.file=/etc/loki/local-config.yaml"
      - "--config.expand-env=true"
    environment:
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
    depends_on:
      - s3
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  tempo:
    image: grafana/tempo:latest
    restart: always
    volumes:
      - ./assets/configs/prod/tempo.yml:/etc/tempo/tempo-config.yaml
      - tempo:/var/tempo
    command: 
      - "--config.file=/etc/tempo/tempo-config.yaml"
      - "--config.expand-env=true"
    environment:
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
    depends_on:
      - s3
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  mimir:
    image: grafana/mimir:latest
    restart: always
    volumes:
      - ./assets/configs/prod/mimir.yml:/etc/mimir/mimir.yaml
    command: 
      - "--config.file=/etc/mimir/mimir.yaml"
      - "--config.expand-env=true"
    environment:
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
    depends_on:
      - s3
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./assets/configs/prod/otel-collector.yml:/etc/otelcol-contrib/config.yaml
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SERVER_ROOT_URL=https://${DEPLOY_DOMAIN}/grafana
    volumes:
      - ./assets/configs/prod/grafana/datasources/:/etc/grafana/provisioning/datasources
      - ./assets/configs/prod/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./assets/configs/prod/grafana/dashboards/:/etc/grafana/dashboards
      - grafana:/var/lib/grafana
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  api:
    image: ghcr.io/udaltsovk/minizord-api:master
    restart: on-failure
    depends_on:
      - db
      - s3
      - otel-collector
    environment:
      RUST_LOG: ${LOG_LEVEL}
      SERVER_ADDRESS: 0.0.0.0:8080
      METRICS_ADDRESS: 0.0.0.0:8081
      DB_ADDRESS: db:8000
      DB_NAMESPACE: minizord
      DB_NAME: api
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      OTEL_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: minizord_api
      S3_BASE_URL: http://s3:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_REGION: ${S3_REGION}
      DEPLOY_DOMAIN: ${DEPLOY_DOMAIN}
      BASE_API_URL: ${BASE_API_URL}
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  frontend:
    image: ghcr.io/udaltsovk/minizord-frontend:master
    restart: on-failure
    depends_on:
      - api
    environment:
      PORT: 3000
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  proxy:
    image: haproxy:latest
    restart: unless-stopped
    volumes:
      - ./assets/configs/prod/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      - api
      - frontend
      - grafana
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    ports:
      - "3000:3000"

  tunnel:
    image: cloudflare/cloudflared:latest
    restart: always
    command: tunnel --no-autoupdate run
    environment:
      TUNNEL_TOKEN: ${CLOUDFLARED_TOKEN}
    depends_on:
      - proxy
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  watchtower:
    image: containrrr/watchtower:latest
    environment:
      WATCHTOWER_POLL_INTERVAL: 60
      WATCHTOWER_HTTP_API_METRICS: true
      WATCHTOWER_HTTP_API_TOKEN: token
    volumes:
      - /run/user/1000/containers/auth.json:/config.json
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
volumes:
  db:
  s3:
  prometheus:
  tempo:
  grafana:
